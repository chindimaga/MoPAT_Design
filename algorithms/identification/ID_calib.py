import cv2
import numpy as np

"""""
so val_concatenate takes the list that needs concatenation, named as code_list and robot list, which is output of localise node
and returns an updated code_list with thee new bits of each robot appended.

so the amin function of ID Calibration node must run code_list= val_concatenate( code_list , robot_list), N times
and ONLY WHEN THE CODE BIT CHANGES, NOT EVERY FRAME.

once val_concatenate has updated code_list N times this completed list is sent to gen_dicts(),
which will generate the 2 dictionaries robot_pos, and robot_code.

gen_dicts has to input arguments: code_list, which is generated by val_concatenate()
and codebook which is a dictionary of ID: to code
it returns both dictionaries robot_pos and robot_code in a list as [ robot_code, robot_list]

robot_pos[i] holds the ID: pos dictionary for the ith frame. i being 0, -1, -2
gen_dicts generates robot_pos with only 1 nested dictionary, which is robot_pos[0]
because this is the first frame and frame -1 and -2 dont exist yet
robot_code is a dictionary from ID: to last N code bots displayed by the robot.

"""

def dist( x1, y1, x2, y2):
    return ( (x1-x2)**2 + (y1-y2)**2 )


def find_val(x, y, robot_list):
    index = -1
    d = float(inf)
    for i in range(0, len(robot_list) - 1):
        if dist(robot_list[i][0], robot_list[i][1], x, y) < d:
            index = i
            d = dist(robot_list[i][0], robot_list[i][1], x, y)

    return robot_list[i][3]


def val_concatenate( code_list, robot_list ) :

    for i in range( 0, len(code_list)-1)
        code_list[i][3].append( find_val( code_list[i][0], code_list[i][1], robot_list ) )
    return code_list

def gen_dicts( code_list, codebook ) :
    robot_pos={}
    robot_code={}
    r= {}
    codes= codebook.values()
    IDs= codebook.keys()
    for x in code_list:
        for i in range(0, len(x[3])-1)

            if x[3] in codes:
                ID= IDs[ codes.index(x[3]) ]
                r.add(ID, code_list[0:2] )
                robot_code.add(ID, code_list[3] )

            else :
                n= len(x[3])
                x[3].insert(0, x[3].pop(n-1))

    robot_pos= {0: r}
    return [robot_pos, robot_code]
